
Infopark SES ist ein Ruby-Gem, welches zum Zweck der Indizierung von
CMS-Inhalten vom CM Nachrichten über geänderte CMS-Objekte entgegen nimmt,
Indizierungs- oder Deindizierungs-Anfragen erzeugt und diese an Solr sendet.

Das Infopark SES Ruby-Gem ergänzt eine bestehende Rails-App, typischerweise die
Website-App eines konkreten Projektes. Die Rails-App muss bereits den Infopark
Rails Connector einsetzen. Infopark SES setzt eine Rails Connector-Anbindung
zur CMS-Datenbank voraus.


Gem testen
==============

Es wird eine Fiona-Entwicklungsumgebung in ../nps vorausgesetzt, die auch
bereits gebaut sein muss. Die Tests des Infopark SES Gems werden mit

  rake test

ausgeführt. Die Tests sind vollständige Integrationstests. Sie liegen in
test_app. Die von der test_app verwendeten Gems liegen in vendor/cache.

Die test_app kann als Vorlage für ein Rails-Projekt dienen.



Gem bauen
==============

  rake build



Installation
==============

Einbindung des Infopark SES Gem in die Rails-App
------------------------------------------------
(Anleitung zur Konfiguration einer Rails-2.3-App mit Bundler: <http://gembundler.com/rails23.html>)

Gemfile:

  gem "infopark_ses"

Infopark SES neben den Infopark Rails Connector und die anderen Gems in vendor/cache ablegen:

  cp infopark_ses-x.y.z.gem vendor/cache/

Gems installieren:

  bundle --path ~/.gem

Bundler installiert mit diesem Kommando alle im Gemfile referenzierten Gems und
deren Abhängigkeiten in ~/.gem. Ohne die Option --path würden die Gems im
System-Ruby-Gem-Verzeichnis installiert. Es ist empfehlenswert, Gems
grundsätzlich im User-Space zu installieren. Die aktuelle Version von Bundler
(1.0.10) beachtet die Einstellungen in ~/.gemrc jedoch nicht, weswegen --path
explizit angegeben werden muss.

Bundler lädt notwendige Gems bei Bedarf von rubygems.org herunter. Alle
Gem-Dateien werden, bevor sie installiert werden, automatisch in vendor/cache
abgelegt, wenn mindestens ein Gem dort liegt. Bundler hält diesen Cache
selbständig up-to-date. Alle Gems in vendor/cache können eingecheckt werden.
Das wird sogar empfohlen, weil so das Deployment (mit Capistrano und Bundler)
auch ohne Internet-Verbindung ausgeführt werden kann.


Die Capistrano-Konfiguration für das Deployment mit Bundler kann folgendermaßen
ergänzt werden. Am Anfang der Datei config/deploy.rb einfügen:

  set :bundle_flags, "--deployment --quiet --local"
  require 'bundler/capistrano'

Beispiel Flughafen Nürnberg: https://git.infopark/gitweb/?p=nue.git;a=blob;f=config/deploy.rb

Beim Deployment installiert Bundler mit der o.g. Option --deployment die Gems
automatisch ins Capistrano-Projekt-Verzeichnis shared/bundle, also direkt neben
releases, current usw. Damit werden Gems im User-Space projektbezogen verwaltet.


Infopark SES bringt beispielhaft Konfigurationsdateien mit, die in der
Projekt-Rails-App benötigt werden:

  ./script/generate infopark_ses

Die generierten Dateien werden im Folgende beschrieben.

In index.rb wird festgelegt, welche Attribute eines Obj unter welchem Key im
Solr-Index gespeichert werden sollen. Infopark::SES::Indexer.index_fields
liefert für ein Obj einen Hash mit der Abbildung von Index-Keys auf
Obj-Attribut-Werte. Infopark::SES::Indexer.index_fields soll projektspezifisch
konfiguriert werden.

filter.rb enthält Konfigurationseinstellungen, um den Fiona-IF-Filter (.doc ->
.html usw.) einzubinden.

In der Projekt-Rails-App steht zum Reindizieren nun auch ein Rake-Task zur
Verfügung:

  rake index:all



Installation von Apache Active MQ jeweils auf CMS-Server und Live-Server
------------------------------------------------------------------------

(Homepage: <http://activemq.apache.org/>)

Der Java-Server Apache Active MQ wird mit curl heruntergeladen und in $HOME
installiert. Per Konvention zeigt ein Symlink namens apache-activemq auf das
ausgepackte Verzeichnis, damit es einfach über ~/apache-activemq referenziert
werden kann. Anschließend wird die neue Installation so konfiguriert, dass sie
für den Einsatz mit Fiona geeignet ist:

  bundle exec ses-apache-activemq install

Starten:

  bundle exec ses-apache-activemq start

Stoppen:

  bundle exec ses-apache-activemq stop

Status:

  bundle exec ses-apache-activemq status



Der Apache Active MQ muss noch so in Fiona integriert werden, dass bei
Änderungen an Objekten vom CM entsprechende Nachrichten an den Apache Active MQ
geschickt werden. In Fiona existiert bereits die Schnittstelle, um die
Tcl-Prozedur objectChangedCallback aufzurufen. Diese Prozedur muss nur noch im
CM implementiert werden. Die Beispiel-Implementierung wird folgermaßen ins
CM-Script-Verzeichnis kopiert und anschließend konfiguriert:

  cp cms-callback/* ~/CMS-Fiona/instance/default/script/cm/serverCmds/
  gem install stomp --no-ri --no-rdoc --no-user-install --install-dir ~/CMS-Fiona/3rdparty/gems

Der Callback objectChangedCallback.tcl ruft das Ruby-Script
publish_object_changes.rb auf, welches wiederum das im CMS-3rdparty
installierte Ruby-Gem stomp benutzt, um mit Apache Active MQ zu kommunizieren.



Installation von Solr
------------------------------------

(Homepage: <http://lucene.apache.org/solr/>)

Der Java-Server Apache Solr wird ebenfalls mit curl heruntergeladen und in $HOME
installiert. Per Konvention zeigt ein Symlink namens apache-solr auf das
ausgepackte Verzeichnis, damit es einfach über ~/apache-solr referenziert
werden kann. Anschließend wird die neue Installation so konfiguriert, dass sie
für den Einsatz mit Fiona geeignet ist:

  bundle exec ses-apache-solr install

Starten:

  bundle exec ses-apache-solr start
  bzw.
  bundle exec ses-apache-solr start:multicore

Stoppen:

  bundle exec ses-apache-solr stop

Status:

  bundle exec ses-apache-solr status

