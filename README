Beschreibung
===================

Infopark SES ist ein Ruby-Gem, welches zum Zweck der Indizierung von
CMS-Inhalten vom CM (über den Apache Active MQ) Nachrichten über geänderte
CMS-Objekte entgegen nimmt, Indizierungs- oder Deindizierungs-Anfragen erzeugt
und diese an Solr sendet.

Das Infopark SES Ruby-Gem ergänzt eine bestehende Rails-App, typischerweise die
Website-App eines konkreten Projektes. Die Rails-App muss bereits den Infopark
Rails Connector einsetzen. Infopark SES setzt eine Rails Connector-Anbindung
zur CMS-Datenbank voraus.

Infopark SES besteht aus dem SES Indexer-Daemon, einem Installer für Apache
Active MQ, einem Installer für Apache Solr und der Logik zu Verdrahten dieser
Software-Komponenten. Der eigentliche Kern des Infopark SES ist der Indexer.
Er kann als dauernd laufender Daemon Verbindung zum Apache Active MQ aufnehmen,
um sofort bei Änderungen an CMS-Inhalten benachrichtigt zu werden. Er fragt
unter Benutzung des Rails Connectors Objekt-Attribute ab, und schickt diese
aufbereitet an Apache Solr.



Gem testen
==============

Es wird eine Fiona-6.7-Entwicklungsumgebung in ../fiona vorausgesetzt, die auch
bereits gebaut sein muss:

  git clone -b 6.7-maint git@github.com:infopark/fiona.git
  cd fiona
  git submodule update --init --recursive
  ln -s ../licenses/infopark-internal-restricted-license.xml config/license.xml
  rake build


Die Tests des Infopark SES Gems werden mit

  rake test

ausgeführt. Die Tests sind vollständige Integrationstests. Sie liegen in
test_app. Die von der test_app verwendeten Gems liegen in vendor/cache.



Gem bauen
==============

  rake build



Installation
==============

Einbindung des Infopark SES Gem in die Rails-App
------------------------------------------------

Gemfile:

  gem "infopark_ses"

Infopark SES neben den Infopark Rails Connector und die anderen Gems in vendor/cache ablegen:

  cp infopark_ses-x.y.z.gem vendor/cache/

Gems installieren:

  bundle

Bundler lädt notwendige Gems bei Bedarf von rubygems.org herunter. Alle
Gem-Dateien werden, bevor sie installiert werden, automatisch in vendor/cache
abgelegt, wenn mindestens ein Gem dort liegt. Bundler hält diesen Cache
selbständig up-to-date. Alle Gems in vendor/cache können eingecheckt werden.
Das wird sogar empfohlen, weil so das Deployment (mit Capistrano und Bundler)
auch ohne Internet-Verbindung ausgeführt werden kann.

Infopark SES bringt beispielhaft Konfigurationsdateien mit, die in der
Projekt-Rails-App benötigt werden:

  rails g ses:install

Ein paar dieser generierten Dateien werden im Folgende beschrieben:

script/ses-indexer ist das Start-Script für den Indexer-Daemon.

In config/initializers/indexer.rb wird festgelegt, welche Attribute eines Obj
unter welchem Key im Solr-Index gespeichert werden sollen.
Infopark::SES::Indexer.index_fields liefert für ein Obj einen Hash mit der
Abbildung von Index-Keys auf Obj-Attribut-Werte. Liefert die Konfiguration nil,
wird die Datei nicht indiziert bzw. deindiziert.
Infopark::SES::Indexer.index_fields soll projektspezifisch konfiguriert werden.

Alle in der index_fields-Konfiguration befüllten Felder müssen Solr per
Konfiguration bekannt sein. Dazu in der Solr-Konfiguration
~/apache-solr/example/solr/conf/schema.xml die Felder (field oder dynamicField)
und deren Typen (fieldType) konfigurieren. Sollen sehr lange Texte vollständig
indiziert werden, muss auch die maxFieldLength in
~/apache-solr/example/solr/conf/solrconfig.xml erhöht werden.

config/initializers/filter.rb enthält Konfigurationseinstellungen, um den
Fiona-IF-Filter (.doc -> .html usw.) einzubinden.


Die Änderungen am Projekt können jetzt eingecheckt werden.




Deployment in die Preview-Umgebung konfigurieren
--------------------------------------------------

Die Capistrano-Konfiguration für das Deployment mit Bundler kann folgendermaßen
ergänzt werden. Am Anfang der Datei config/deploy.rb einfügen:

  set :bundle_flags, "--deployment --quiet --local"
  require 'bundler/capistrano'

In den Namespace :deploy zusätzlich den Task :restart_ses_indexer einfügen:

  task :restart_ses_indexer, :roles => :app do
    if stage == 'cms_preview'
      run "cd #{current_path} && RAILS_ENV=#{rails_env} ./script/ses-indexer restart"
    end
  end

Und weiter unten:
  after "deploy:restart", "deploy:restart_ses_indexer"


Beim Deployment installiert Bundler mit der o.g. Option --deployment die Gems
automatisch ins Capistrano-Projekt-Verzeichnis shared/bundle, also direkt neben
releases, current usw. Damit werden Gems im User-Space projektbezogen verwaltet.

Deploy ins Preview-Environment:

  cap deploy


Manuell kann der Indexer-Daemon übrigens mit folgenden Kommandos gesteuert werden:

  RAILS_ENV=production script/ses-indexer start
  RAILS_ENV=production script/ses-indexer stop
  RAILS_ENV=production script/ses-indexer restart
  RAILS_ENV=production script/ses-indexer status


Beispiel Flughafen Nürnberg:
  https://github.com/infopark-customers/airport-nuernberg/blob/master/config/deploy.rb


Nach dem Deploy sollte zwar der Indexer-Daemon ses-indexer laufen, jedoch hat
er zum Apache Active MQ und zum Apache Solr noch keine Verbindung. Deswegen
werden im Folgenden diese Komponenten installiert:




Installation von Apache Active MQ jeweils auf CMS-Server
------------------------------------------------------------------------

(Homepage: <http://activemq.apache.org/>)

Der Java-Server Apache Active MQ wird mit curl heruntergeladen und in $HOME
installiert. Per Konvention zeigt ein Symlink namens apache-activemq auf das
ausgepackte Verzeichnis, damit es einfach über ~/apache-activemq referenziert
werden kann. Anschließend wird die neue Installation so konfiguriert, dass sie
für den Einsatz mit Fiona geeignet ist:

  ssh cms-host
  cd $project/preview/current
  bundle exec ses-apache-activemq install

Starten:

  bundle exec ses-apache-activemq start

Stoppen:

  bundle exec ses-apache-activemq stop

Status:

  bundle exec ses-apache-activemq status



Der Apache Active MQ muss noch so in Fiona integriert werden, dass bei
Änderungen an Objekten vom CM entsprechende Nachrichten an den Apache Active MQ
geschickt werden. In Fiona existiert bereits die Schnittstelle, um die
Tcl-Prozedur objectChangedCallback aufzurufen. Diese Prozedur muss nur noch im
CM implementiert werden. Die Beispiel-Implementierung wird folgermaßen ins
CM-Script-Verzeichnis kopiert und anschließend konfiguriert:

  cp $(bundle show infopark_ses)/cms-callback/* ~/CMS-Fiona/instance/default/script/cm/serverCmds/
  gem install stomp --no-ri --no-rdoc --no-user-install --install-dir ~/CMS-Fiona/instance/default/script/gems

Der Callback objectChangedCallback.tcl ruft das Ruby-Script
publish_object_changes.rb auf, welches wiederum das im CMS-3rdparty
installierte Ruby-Gem stomp benutzt, um mit Apache Active MQ zu kommunizieren.

Schließlich muss noch der CM neu gestartet werden, damit er den neuen Callback nutzt:

  ~/CMS-Fiona/instance/default/bin/rc.npsd restart CM

Zur Problemanalyse ist der Apache ActiveMQ erreichbar unter: http://localhost:8161



Installation von Solr
------------------------------------

(Homepage: <http://lucene.apache.org/solr/>)

Der Java-Server Apache Solr wird ebenfalls mit curl heruntergeladen und in $HOME
installiert. Per Konvention zeigt ein Symlink namens apache-solr auf das
ausgepackte Verzeichnis, damit es einfach über ~/apache-solr referenziert
werden kann. Anschließend wird die neue Installation so konfiguriert, dass sie
für den Einsatz mit Fiona geeignet ist:

  ssh cms-host
  cd $project/preview/current
  bundle exec ses-apache-solr install

Starten:

  bundle exec ses-apache-solr start

Stoppen:

  bundle exec ses-apache-solr stop

Status:

  bundle exec ses-apache-solr status


Zur Problemanalyse ist der Apache Solr erreichbar unter:
http://localhost:8983/solr/admin bzw. http://localhost:8983/solr/de/admin bei
Verwendung von mehreren Cores (aka. Collections). Im letzteren Fall ist der
URL-Bestandteil "de" der Name des Cores.


Konfiguration von Solr für Multicore
-------------------------------------


Folgendes Beispiel erzeugt 2 Cores: "de" und "en".

  bundle exec ses-apache-solr create_core CORE=de
  bundle exec ses-apache-solr create_core CORE=en

Die oben erwähnte Datei config/initializers/indexer.rb enthält bereits
auskommentiert die Konfiguration für die Cores "de" und "en". Diese
Konfiguration muss nur einkommentiert werden. Die collection_selection geht
beispielhaft davon aus, dass der Core an der ersten Pfadkomponente entschieden
wird, d. h.  /de/about wird in "de" indiziert, /en/about in "en".




Komplette Indizierung
---------------------------

Der SES Indexer-Daemon wird neu gestartet und dann alle CMS-Inhalte indiziert:

  ssh cms-host
  cd $project/preview/current
  RAILS_ENV=production script/ses-indexer restart
  RAILS_ENV=production rake index:all



Integration der Suche in Rails
--------------------------------

Die Rails-Connector-Add-Ons ab Version 6.7.3 unterstützen den Lucene-basierten SES.

Zur Aktivierung muss der SearchRequest umdefiniert werden:

  class SearchRequest < RailsConnector::LuceneSearchRequest
  end

Das Interface bleibt gleich, bis auf folgende Ausnahmen: Querys werden in Solr
Query Language anstatt VQL geschrieben. Die möglichen Optionen sind im
LuceneSearchRequest dokumentiert.
